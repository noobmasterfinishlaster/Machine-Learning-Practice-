# -*- coding: utf-8 -*-
"""Decision Tree .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Q0-rdNSX9CZFAMpmLs9wNAIipaNv1_t
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/insurance_data (1).csv')
df.head()

plt.scatter (data = df , x = 'age' , y = 'bought_insurance',marker = '*',color = 'red')

from sklearn.model_selection import train_test_split

x_train,x_test, y_train, y_test =  train_test_split(df[['age']],df.bought_insurance,test_size = .1)

x_train.shape

y_train.head()

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train,y_train)

model .predict(x_test)

y_test

model.score(x_test,y_test)



"""# Decision Tree Classifier"""

df = pd.read_csv('/content/salaries.csv')
df.head()

input = df.drop('salary_more_then_100k',axis = 1)
target = df['salary_more_then_100k']

input

target

from sklearn.preprocessing import LabelEncoder

le_company = LabelEncoder()
le_job = LabelEncoder()
le_degree = LabelEncoder()

input['company_n']= le_company.fit_transform(input['company'])
input['job_n']= le_job.fit_transform(input['job'])
input['degree_n']= le_degree.fit_transform(input['degree'])

input.head()



input_n = input[['company_n','job_n','degree_n']]

input_n

from sklearn import tree

model = tree.DecisionTreeClassifier()

model.fit(input_n,target)

model.predict([[2,0,0]])

"""# Decision Tree Exercise ( Titanic Survival)"""

df = pd.read_csv('/content/titanic.csv')
df.head()

input = df[['Pclass','Sex','Age','Fare']]
target = df['Survived']

input.head()

target.head()

input.isnull().sum()

input.Age.fillna(input.Age.mean(),inplace = True)

input.Sex = input.Sex.map({'male':1 , 'female':2})

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(input,target,test_size = .2)

from sklearn import tree
model = tree.DecisionTreeClassifier()

model.fit(x_train,y_train)

model.score(x_test,y_test)

